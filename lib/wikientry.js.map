{"version":3,"sources":["../src/wikientry.js"],"names":["unirest","require","cheerio","speech","patch","re","s","eval","k","match","length","verify_word","word","Promise","resolve","reject","req","query","headers","end","res","error","data","body","search","info","title","get_wiki_entry","dictionary","language","definitions","$","load","cnt","find","each","i","elem","text","x","empty","curspeech","prev","onedefinition","lines","children","i1","elem1","print","split","oneline","define","examples","push","wiki","word1","dict","module","exports"],"mappings":"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","file":"wikientry.js","sourcesContent":["const unirest = require(\"unirest\");\nconst cheerio = require(\"cheerio\");\n\n//wiki\nconst speech = [\n    'Noun',\n    'Pronoun',\n    'Adjectives',\n    'Numerals',\n    'Verb',\n    'Adverb',\n    'Article',\n    'Preposition',\n    'Conjunction',\n    'Interjection',\n    'Abbreviation'\n];\nconst patch = (re, s) => {\n    re = eval(\"/\" + re + \"/ig\");\n    let k = s.match(re);\n    if (k) {\n        return k.length;\n    } else {\n        return 0;\n    }\n};\n\nconst verify_word = (word) => {\n    return new Promise((resolve, reject) => {\n        const req = unirest(\"GET\", \"https://en.wiktionary.org/w/api.php\");\n        req.query({\n            \"action\": \"query\",\n            \"list\": \"search\",\n            \"format\": \"json\",\n            \"utf8\": \"\",\n            \"srprop\": \"\",\n            \"srsearch\": word,\n            \"srwhat\": \"nearmatch\"\n        });\n        req.headers({\"postman-token\": \"c2b2280b-1b34-22f5-f96c-a07ad89c1713\", \"cache-control\": \"no-cache\"});\n        req.end(function (res) {\n            if (res.error) \n                reject(res.error);\n            const data = res.body.query.search;\n            if (data.length == 0) {\n                reject({info: 'word does not exist'});\n            } else {\n                resolve(data[0].title);\n            }\n        });\n    })\n}\n\nconst get_wiki_entry = (word) => {\n    return new Promise((resolve, reject) => {\n        const req = unirest(\"GET\", \"https://en.wiktionary.org/w/index.php\");\n        req.query({\"title\": word, \"printable\": \"yes\"});\n        req.headers({\"postman-token\": \"ebdb9090-7be1-6aeb-b7fb-7f68eb7a4202\", \"cache-control\": \"no-cache\"});\n        req.end(function (res) {\n            if (res.error) \n                reject(res.error);\n            let dictionary = {\n                word: word,\n                language: 'en',\n                definitions: []\n            };\n            // console.log(res.body);\n            let $ = cheerio.load(res.body);\n            let cnt = 0;\n            $('.toc')\n                .find('.toclevel-1')\n                .each(function (i, elem) {\n                    if (i == 0) {\n                        const text = $(elem).text();\n                        for (let x in speech) {\n                            cnt += patch(speech[x], text);\n                        }\n                    } else {\n                        return;\n                    }\n                });\n            $('.mw-parser-output')\n                .find('ol')\n                .each(function (i, elem) {\n                    if (i < cnt) {\n                        $(elem)\n                            .find('ul')\n                            .empty();\n                        let curspeech = $(elem)\n                            .prev()\n                            .prev()\n                            .text();\n                        let onedefinition = {\n                            speech: curspeech,\n                            lines: []\n                        };\n\n                        $(elem)\n                            .children()\n                            .each(function (i1, elem1) {\n                                let print = $(elem1)\n                                    .text()\n                                    .split('\\n');\n                                let oneline = {\n                                    define: '',\n                                    examples: []\n                                };\n                                for (let x in print) {\n                                    if (x == 0) {\n                                        oneline['define'] = print[x];\n                                    } else {\n                                        if (print[x]) {\n                                            oneline['examples'].push(print[x]);\n                                        }\n                                    }\n                                }\n                                onedefinition['lines'].push(oneline);\n                            });\n                        dictionary['definitions'].push(onedefinition);\n                    }\n                });\n            resolve(dictionary);\n        });\n    });\n}\n\nconst wiki = async(word) => {\n    try {\n        const word1 = await verify_word(word);\n        const dict = await get_wiki_entry(word1);\n        return dict;\n    } catch (err) {\n        return Promise.reject(err);\n    }\n}\n\nmodule.exports = wiki;"]}